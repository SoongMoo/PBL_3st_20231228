1. 각 부서별 부서의 급여의 평균, 합계, 최대, 최소, 사원의 수
SELECT DEPARTMENT_ID, TRUNC(AVG(SALARY)), SUM(SALARY), MAX(SALARY), MIN(SALARY), COUNT(*)
FROM HR.EMPLOYEES
GROUP BY DEPARTMENT_ID;

2. 같은 직무를 하는 사원들 중 제일 먼저 들어 온 사원가 제일 늦게 들어온 사원의 
---    입사일을 출력하시오.
SELECT JOB_ID, MAX(HIRE_DATE)
FROM HR.EMPLOYEES
GROUP BY JOB_ID;

3. 사원번호,  이름, 입사일, 직무, 부서를 출력할 때.
-- 부서는 오름차순으로 정렬하고 각 부서의 직무를 오름차순으로 정렬하여 출력하시오.   
SELECT EMPLOYEE_ID, FIRST_NAME, HIRE_DATE, JOB_ID, DEPARTMENT_ID
FROM HR.EMPLOYEES
ORDER BY DEPARTMENT_ID ASC, JOB_ID ASC;

4.  각 부서의 직무별 급여 평균 , 합계, 담당하는 사원의 수를 출력
SELECT DEPARTMENT_ID, JOB_ID, AVG(SALARY), SUM(SALARY), COUNT(*)
FROM HR.EMPLOYEES
GROUP BY DEPARTMENT_ID, JOB_ID;

5. 90부서에서 직무별 급여 합계와 평균 구하시오.
SELECT DEPARTMENT_ID, JOB_ID, AVG(SALARY), SUM(SALARY)
FROM HR.EMPLOYEES
GROUP BY DEPARTMENT_ID, JOB_ID
HAVING DEPARTMENT_ID = 90;

6. 각부서에서 직무가 같은 사원들 중 입사일이 같은 사원의 수를 구하시오.
-- 사원수가 5명이상만 출력
SELECT DEPARTMENT_ID, JOB_ID, HIRE_DATE, COUNT(*)
FROM HR.EMPLOYEES
GROUP BY DEPARTMENT_ID, JOB_ID, HIRE_DATE
HAVING COUNT(*) >= 5;

7. 평균급여가 5000이상인 부서만 출력하시오.평균 급여 높은 것 부터 출력하시오.
SELECT DEPARTMENT_ID, TRUNC(AVG(SALARY))
FROM HR.EMPLOYEES
GROUP BY DEPARTMENT_ID
HAVING AVG(SALARY) >= 5000
ORDER BY AVG(SALARY) DESC;

8. 부서의 직원 수가 10명 미만이 부서를 출력하시오.
SELECT DEPARTMENT_ID, COUNT(*)
FROM HR.EMPLOYEES
GROUP BY DEPARTMENT_ID
HAVING COUNT(*) < 10;

9. 직무에 'REP'가 포함되어 있지 않은 직무별 급여의 평균, 합계, 최소, 
--- 최대 값을 출력할때 급여의 합계가 13000이상인 직무만 출력하시오.
SELECT JOB_ID, AVG(SALARY), SUM(SALARY), MIN(SALARY)
FROM HR.EMPLOYEES
WHERE JOB_ID NOT LIKE '%REP'
GROUP BY JOB_ID
HAVING SUM(SALARY) >= 130000;

10.  사원의 성, 급여 , 입사일, 직무를 출력할 대 직무명도 같이 출력하시오.
SELECT FIRST_NAME, SALARY, HIRE_DATE, E.JOB_ID, JOB_TITLE
FROM HR.EMPLOYEES E JOIN HR.JOBS J
ON E.JOB_ID = J.JOB_ID;

11. 부서 테이블에서 90인 부서정보를 출력하시오.
SELECT *
FROM HR.DEPARTMENTS
WHERE DEPARTMENT_ID = 90;

12. 90인 부서의 직원을 구하시오, -- 컬럼은 임의로
SELECT DEPARTMENT_ID, EMPLOYEE_ID, FIRST_NAME
FROM HR.EMPLOYEES
WHERE DEPARTMENT_ID = 90;

13. 100번 사원 정보를 출력하시오.-- 컬럼은 임의로
SELECT EMPLOYEE_ID, FIRST_NAME, DEPARTMENT_ID
FROM HR.EMPLOYEES
WHERE EMPLOYEE_ID = 100;

14. 11부터 13번까지을 한번에 출력하세요.-- 컬럼은 임의로
SELECT E.DEPARTMENT_ID, E.EMPLOYEE_ID, FIRST_NAME, DEPARTMENT_NAME
FROM HR.EMPLOYEES E JOIN HR.DEPARTMENTS D
ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
WHERE E.DEPARTMENT_ID IN (90, 100);

15. 직원번호, 성, 이름, 급여, 직무, 부서번호, 지역번호, 부서명을 출력 
SELECT EMPLOYEE_ID, FIRST_NAME, LAST_NAME, SALARY, JOB_ID, E.DEPARTMENT_ID,
LOCATION_ID, DEPARTMENT_NAME
FROM HR.EMPLOYEES E JOIN HR.DEPARTMENTS D
ON E.DEPARTMENT_ID = D.DEPARTMENT_ID;

16. 직원번호 .성, 이름 급여 부서번호, 부서명을 100사원만 출력하시오.
SELECT EMPLOYEE_ID, FIRST_NAME, LAST_NAME, SALARY,
E.DEPARTMENT_ID, DEPARTMENT_NAME
FROM HR.EMPLOYEES E JOIN HR.DEPARTMENTS D
ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
WHERE E.DEPARTMENT_ID = 100;

17. 직원 번호, 성, 이름 , 직무, 직무명을 출력하세요.
T-SQL Join , Ansi-Join(inner Join, NATURAL JOIN , using절)모두 구현할 것
-- T=SQL JOIN
SELECT EMPLOYEE_ID, FIRST_NAME, LAST_NAME, E.JOB_ID, JOB_TITLE
FROM HR.EMPLOYEES E, HR.JOBS J
WHERE E.JOB_ID = J.JOB_ID;

--INNER JOIN
SELECT EMPLOYEE_ID, FIRST_NAME, LAST_NAME, E.JOB_ID, JOB_TITLE
FROM HR.EMPLOYEES E JOIN HR.JOBS J
ON E.JOB_ID = J.JOB_ID;

--NATURAL JOIN
SELECT EMPLOYEE_ID, FIRST_NAME, LAST_NAME, JOB_ID, JOB_TITLE
FROM HR.EMPLOYEES NATURAL JOIN HR.JOBS;

--USING절
SELECT EMPLOYEE_ID, FIRST_NAME, LAST_NAME, JOB_ID, JOB_TITLE
FROM HR.EMPLOYEES JOIN HR.JOBS
USING(JOB_ID);

18. 부서장이 상사인 직원을 구하시오.
  직원번호, 성, 급여 입사일, 부서번호, 부서장번호를 출력하시오.
T-SQL Join , Ansi-Join(inner Join, NATURAL JOIN , using절)모두 구현할 것

-- T-SQL JOIN
SELECT D.MANAGER_ID,
E.EMPLOYEE_ID, FIRST_NAME, SALARY, HIRE_DATE,
D.DEPARTMENT_ID, DEPARTMENT_NAME
FROM HR.EMPLOYEES E, HR.DEPARTMENTS D
WHERE E.EMPLOYEE_ID = D.MANAGER_ID;

-- INNER JOIN
SELECT D.MANAGER_ID,
E.EMPLOYEE_ID, FIRST_NAME, SALARY, HIRE_DATE,
D.DEPARTMENT_ID, DEPARTMENT_NAME
FROM HR.EMPLOYEES E JOIN HR.DEPARTMENTS D
ON E.EMPLOYEE_ID = D.MANAGER_ID;

19. 성 이름 직원번호 , 전화번호 , 급여 부서번호, 부서명을 출력
T-SQL Join , Ansi-Join(inner Join, NATURAL JOIN , using절)모두 구현할 것

-- T-SQL JOIN
SELECT FIRST_NAME, LAST_NAME, EMPLOYEE_ID, PHONE_NUMBER, SALARY, 
E.DEPARTMENT_ID, DEPARTMENT_NAME
FROM HR.EMPLOYEES E, HR.DEPARTMENTS D
WHERE E.DEPARTMENT_ID = D.DEPARTMENT_ID;

-- INNER JOIN
SELECT FIRST_NAME, LAST_NAME, EMPLOYEE_ID, PHONE_NUMBER, SALARY, 
E.DEPARTMENT_ID, DEPARTMENT_NAME
FROM HR.EMPLOYEES E JOIN HR.DEPARTMENTS D
ON E.DEPARTMENT_ID = D.DEPARTMENT_ID;

-- NATURAL JOIN
SELECT FIRST_NAME, LAST_NAME, EMPLOYEE_ID, PHONE_NUMBER, SALARY, 
DEPARTMENT_ID, DEPARTMENT_NAME
FROM HR.EMPLOYEES NATURAL JOIN HR.DEPARTMENTS;

-- USING절
SELECT FIRST_NAME, LAST_NAME, EMPLOYEE_ID, PHONE_NUMBER, SALARY, 
DEPARTMENT_ID, DEPARTMENT_NAME
FROM HR.EMPLOYEES JOIN HR.DEPARTMENTS
USING(DEPARTMENT_ID);

20. 각 부서의 부서의 정보와 부서장의 이름을 출력 하시오
SELECT D.DEPARTMENT_ID, D.DEPARTMENT_NAME, D.MANAGER_ID, E.FIRST_NAME
FROM HR.EMPLOYEES E JOIN HR.DEPARTMENTS D
ON E.EMPLOYEE_ID = D.MANAGER_ID;

21. 직원 번호, 직무 번호 , 직무내용
SELECT EMPLOYEE_ID, J.JOB_ID, JOB_TITLE
FROM HR.EMPLOYEES E JOIN HR.JOBS J
ON E.JOB_ID = J.JOB_ID;

22. 직원번호, 부서번호, 부서명
SELECT EMPLOYEE_ID, E.DEPARTMENT_ID, DEPARTMENT_NAME
FROM HR.EMPLOYEES E JOIN HR.DEPARTMENTS D
ON E.DEPARTMENT_ID = D.DEPARTMENT_ID;

23. 각 직원의 직원번호, 직무번호, 직무 내용, 부서번호, 부서명
T-SQL Join , Ansi-Join(inner Join, NATURAL JOIN , using절)모두 구현할 것

-- T - SQL JOIN
SELECT E.EMPLOYEE_ID,
J.JOB_ID, JOB_TITLE,
D.DEPARTMENT_ID, DEPARTMENT_NAME
FROM HR.EMPLOYEES E, HR.JOBS J, HR.DEPARTMENTS D
WHERE E.JOB_ID = J.JOB_ID AND E.DEPARTMENT_ID = D.DEPARTMENT_ID;

-- INNER JOIN
SELECT E.EMPLOYEE_ID,
J.JOB_ID, JOB_TITLE,
D.DEPARTMENT_ID, DEPARTMENT_NAME
FROM HR.EMPLOYEES E JOIN HR.JOBS J
ON E.JOB_ID = J.JOB_ID JOIN HR.DEPARTMENTS D
ON E.DEPARTMENT_ID = D.DEPARTMENT_ID;

-- USING절
SELECT EMPLOYEE_ID,
JOB_ID, JOB_TITLE,
DEPARTMENT_ID, DEPARTMENT_NAME
FROM HR.EMPLOYEES JOIN HR.JOBS
USING(JOB_ID) JOIN HR.DEPARTMENTS
USING(DEPARTMENT_ID);


24. 부서장의 직무내용을 출력하시오. 부서장 번호, 직무내용,
SELECT D.MANAGER_ID, J.JOB_TITLE, E.EMPLOYEE_ID, J.JOB_ID
FROM HR.EMPLOYEES E JOIN HR.DEPARTMENTS D
ON E.EMPLOYEE_ID = D.MANAGER_ID JOIN HR.JOBS J
ON E.JOB_ID = J.JOB_ID;

25. 부서가 없는 직원도 같이 출력
SELECT EMPLOYEE_ID, FIRST_NAME, SALARY,
D.DEPARTMENT_ID, DEPARTMENT_NAME
FROM HR.EMPLOYEES E LEFT OUTER JOIN HR.DEPARTMENTS D
ON E.DEPARTMENT_ID = D.DEPARTMENT_ID;


26. 직원이 없는 부서 를 출력
SELECT EMPLOYEE_ID, FIRST_NAME, SALARY,
D.DEPARTMENT_ID, DEPARTMENT_NAME
FROM HR.EMPLOYEES E RIGHT OUTER JOIN HR.DEPARTMENTS D
ON E.DEPARTMENT_ID = D.DEPARTMENT_ID;

27. 부서가 없는 직원과 직원이 없는 부서까지 모두 출력

SELECT EMPLOYEE_ID, FIRST_NAME, SALARY,
D.DEPARTMENT_ID, DEPARTMENT_NAME
FROM HR.EMPLOYEES E FULL OUTER JOIN HR.DEPARTMENTS D
ON E.DEPARTMENT_ID = D.DEPARTMENT_ID;
