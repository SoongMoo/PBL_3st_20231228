select * from user_objects;
select * from all_objects;
select * from dba_objects;

----- 테이블정보
select * from user_tables;
select * from all_tables; 
select * from dba_tables;

desc DEPARTMENTS;

select * from user_tab_columns where table_name = 'DEPARTMENTS';
select * from all_tab_columns where table_name = 'DEPARTMENTS';
select * from dba_tab_columns where table_name = 'DEPARTMENTS';


select * from user_constraints where table_name = 'DEPARTMENTS';
select * from all_constraints where table_name = 'DEPARTMENTS';
select * from dba_constraints where table_name = 'DEPARTMENTS';

select * from user_cons_columns where table_name = 'DEPARTMENTS';
select * from all_cons_columns where table_name = 'DEPARTMENTS';
select * from dba_cons_columns where table_name = 'DEPARTMENTS';

---- 뷰 정보
select text from user_views where view_name = 'REP_VIEW';
select text from all_views where view_name = 'REP_VIEW';
select text from dba_views where view_name = 'REP_VIEW';

--- 시퀀스
select * from user_sequences where sequence_name = 'TEST30_SEQ';
select * from all_sequences where sequence_name = 'TEST30_SEQ';
select * from dba_sequences where sequence_name = 'TEST30_SEQ';

--- index
select * from user_indexes where table_name ='EMPLOYEES';
select * from all_indexes where table_name ='EMPLOYEES';
select * from dba_indexes where table_name ='EMPLOYEES';

-- index가 있는 컬럼
select * from user_ind_columns where index_name ='IDX_DID';
select * from all_ind_columns where index_name ='IDX_DID';
select * from dba_ind_columns where index_name ='IDX_DID';

-- 사번, 이름 , 급여, 직무, 입사일, 이메일 , 부서번호를 출력
select employee_id, first_name, salary, job_id, hire_date, email, department_id
from employees;

--- from절에 있는 서브쿼리를 inline view
select * 
from (select employee_id, first_name, salary, job_id, hire_date
             , email, department_id
      from employees);
--- 사번, 이름 , 급여, 부서, 각 부서의 평균급여를 출력
select department_id, avg(salary)
from employees
group by department_id;

select employee_id, first_name, salary
     , d.department_id, avg_sal
from employees e join (select department_id, avg(salary) avg_sal
                     from employees
                     group by department_id) d
on e.department_id = d.department_id;


--- 사번, 이름 , 급여, 부서, 각 부서의 평균급여를 출력 할 때 평균 급여보다 많이 받는 사원들을 출력
select employee_id, first_name, salary
     , d.department_id, avg_sal
from employees e join (select department_id, avg(salary) avg_sal
                     from employees
                     group by department_id) d
on e.department_id = d.department_id
where salary > avg_sal;

--- 
desc departments;
insert into departments (DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID)
values(30,	'Purchasing',	114,	1700);
select * from departments;

--- 
desc employees;
insert into employees(EMPLOYEE_ID, LAST_NAME,EMAIL, HIRE_DATE,JOB_ID,DEPARTMENT_ID)
values(350, '최', 'hiland', sysdate, 'IT_PROG', 50);
select * from employees where employee_id = 350;

insert into (select EMPLOYEE_ID, LAST_NAME,EMAIL, HIRE_DATE,JOB_ID,DEPARTMENT_ID 
             from employees where department_id = 130)
values(360, '최', 'hiland', sysdate, 'IT_PROG', 130);

insert into (select EMPLOYEE_ID, LAST_NAME,EMAIL, HIRE_DATE,JOB_ID,DEPARTMENT_ID 
             from employees 
             where department_id = 80
             with check option)
values(370, '최', 'hiland', sysdate, 'IT_PROG', 80);

insert into (select EMPLOYEE_ID, LAST_NAME,EMAIL, HIRE_DATE,JOB_ID,DEPARTMENT_ID 
             from employees 
             where department_id = 80
             with check option)
values(370, '최', 'hiland', sysdate, 'IT_PROG', 70);
---- SQL 오류: ORA-01402: 뷰의 WITH CHECK OPTION의 조건에 위배 됩니다
---- 출력된 결과와 입력되는 값이 서로 일치해야 저장되도록 한다.


insert into (select employee_id, last_name, email, job_id
            , hire_date, department_id
            from employees
            where department_id = 50) 
values(600, '이', 'high', '강사', sysdate, 30);

insert into (select employee_id, last_name, email, job_id
            , hire_date, department_id
            from employees
            where department_id = 50
            with check option) 
values(600, '이', 'high', '강사', sysdate, 30);


alter table employees
modify (hire_date default sysdate);

insert into employees(EMPLOYEE_ID, LAST_NAME,EMAIL, HIRE_DATE,JOB_ID,DEPARTMENT_ID)
values(400, '최', 'hiland', default, 'IT_PROG', 50);

update employees
set hire_date = default  -- sysdate
where employee_id = 150;

TRUNCATE table employees;
insert into employees
select * from hr.employees;
drop table employees1;
drop table employees2;


create table employees1(
    EMPLOYEE_ID NUMBER(6),
     FIRST_NAME VARCHAR2(20),
    LAST_NAME VARCHAR2(25)
);
create table employees2(
    EMPLOYEE_ID NUMBER(6),
    HIRE_DATE DATE,
    JOB_ID varchar2(100)
);
SELECT  EMPLOYEE_ID , FIRST_NAME , LAST_NAME , HIRE_DATE , JOB_ID
FROM hr.employees;


insert aLL 
            into employees1(EMPLOYEE_ID , FIRST_NAME, LAST_NAME) 
                    values(EMPLOYEE_ID,FIRST_NAME,LAST_NAME)
            into employees2(EMPLOYEE_ID , HIRE_DATE, JOB_ID) 
                    values(EMPLOYEE_ID, HIRE_DATE, JOB_ID)
SELECT  EMPLOYEE_ID , FIRST_NAME , LAST_NAME , HIRE_DATE , JOB_ID
FROM hr.employees;
select * from employees1;
select * from employees2;

TRUNCATE table employees1;
TRUNCATE table employees2;
---- 입사일 05/12/24 보다 작으면 employees1에 넣고 그렇지 않으면 employees2넣고자 한다.
SELECT  EMPLOYEE_ID , FIRST_NAME , LAST_NAME , HIRE_DATE , JOB_ID
FROM hr.employees;

insert aLL 
        WHEN HIRE_DATE < '05/12/24' then
            into employees1(EMPLOYEE_ID , FIRST_NAME, LAST_NAME) 
                    values(EMPLOYEE_ID,FIRST_NAME,LAST_NAME)
        else
            into employees2(EMPLOYEE_ID , HIRE_DATE, JOB_ID) 
                    values(EMPLOYEE_ID, HIRE_DATE, JOB_ID)
SELECT  EMPLOYEE_ID , FIRST_NAME , LAST_NAME , HIRE_DATE , JOB_ID
FROM hr.employees;

-- 입사일 05/12/24 보다 작으면 employees1에 넣고 commission_pct가 null이 아닌 사원은 employees2넣고자 한다.
insert aLL 
        WHEN HIRE_DATE < '05/12/24' then
            into employees1(EMPLOYEE_ID , FIRST_NAME, LAST_NAME) 
                    values(EMPLOYEE_ID,FIRST_NAME,LAST_NAME)
        when commission_pct is not null then
            into employees2(EMPLOYEE_ID , HIRE_DATE, JOB_ID) 
                    values(EMPLOYEE_ID, HIRE_DATE, JOB_ID)
SELECT  EMPLOYEE_ID , FIRST_NAME , LAST_NAME , HIRE_DATE , JOB_ID, commission_pct
FROM hr.employees;

create table education(
    EMP_ID VARCHAR2(10),
    school_Year Date,
    school varchar2(100)
);
insert all
        into education (EMP_ID,school_Year, school) values('2222','24/05/28','디지털 대학교')
        into education (EMP_ID,school_Year, school) values('2223','24/05/28','디지털')
select * from dual;
select * from education;
/*
insert into education
values('2222','24/05/28','디지털 대학교')
values('2223','24/05/28','디지털')
*/

desc emp;
TRUNCATE table emp;

-- 장바구니 : 있으면 수정하고 없으면 추가
-- 사원이 있으면 급여를 100증가 시켜주고 없는 사원을 등록
merge into emp c
using (select * from employees ) e
on (c.employee_id = e.employee_id)
when matched then
update set
    salary = salary  + 100
when not matched then
    insert values(e.EMPLOYEE_ID,e.FIRST_NAME,e.LAST_NAME, e.EMAIL, e.PHONE_NUMBER,e.HIRE_DATE
               , e.JOB_ID , e.SALARY, e.COMMISSION_PCT, e.MANAGER_ID, e.DEPARTMENT_ID);
    
select * from emp;


truncate table emp; --- delete
select * from emp;

merge into emp c
using employees  e
on (c.employee_id = e.employee_id)
when matched then
update set
    c.salary = e.salary,
    c.FIRST_NAME = e.FIRST_NAME,
    c.LAST_NAME = e.LAST_NAME,
    c.EMAIL = e.EMAIL,
    c.PHONE_NUMBER = e.PHONE_NUMBER,
    c.HIRE_DATE = e.HIRE_DATE
when not matched then
    insert values(e.EMPLOYEE_ID,e.FIRST_NAME,e.LAST_NAME, e.EMAIL, e.PHONE_NUMBER,e.HIRE_DATE
               , e.JOB_ID , e.SALARY, e.COMMISSION_PCT, e.MANAGER_ID, e.DEPARTMENT_ID);
select * from emp;

--- 모든 데이터를 넣지말고 원하는 데이터만 넣기

truncate table emp;
merge into emp c
using (select * from employees where employee_id = 100) e2
on (c.employee_id = e2.employee_id)
WHEN MATCHED THEN
update set
    salary = e2.salary * 12 + 100
WHEN not MATCHED THEN
insert values(e2.employee_id, e2.first_name, e2.last_name,
              e2.email, e2.phone_number, e2.hire_date, e2.job_id,
              e2.salary,e2.commission_pct, e2.manager_id,
              e2.department_id);
select * from emp;

create  table cart(
    goods_num VARCHAR(10),
    cart_date date not null,
    cart_qty integer not null
);
MERGE into cart c --- 장바구니 알고리즘
using (select * from employees where employee_id = 100) e
on (c.goods_num = e.employee_id)
when MATCHED THEN
update set
    cart_qty = cart_qty + 1
when not MATCHED THEN
    insert values(e.employee_id, sysdate, 10);

select * from cart;

MERGE into cart c  -- 관심 상품 알고리즘
using (select * from employees where employee_id = 100) e
on (c.goods_num = e.employee_id)
when MATCHED THEN
update set
    cart_date = sysdate
delete where goods_num = 100
when not MATCHED THEN
    insert values(e.employee_id, sysdate, 10);

-- window함수 --- partition by :group by 컬럼
select column1, ..., window_function(arguments) over (partition by 컬럼 order by windowing 절)
from table명;
-- employees 테이블의 첫 행부터 마지막행까지 직원 번호, 이름, 급여, 급여의 총합계를 출력하시오;
select sum(salary) from employees;
select employee_id, first_name, salary, sum_sal
from employees e , (select sum(salary) sum_sal from employees) d;

select employee_id, first_name, salary, sum(salary) over( order by salary 
                                                          rows between unbounded preceding  --첫행
                                                          and UNBOUNDED FOLLOWING ) -- 마지막행 
from employees;

--- employees 테이블의 첫 행부터 마지막행까지 직원 번호, 이름, 급여, 급여의 누적 합계를 출력하시오;
select employee_id, first_name, salary, sum(salary) over (order by salary 
                                                          rows between unbounded preceding
                                                               and CURRENT row)  -- 현재행
from employees;

-- employees 테이블의 첫 행부터 마지막행까지 직원 번호, 이름, 급여, 
-- 급여의 합계를 현재 행 부터 마지막행까지의 합을 구하시오;
select employee_id, first_name, salary, sum(salary) over (order by salary 
                                                          rows between CURRENT row -- 현재행
                                                               and UNBOUNDED FOLLOWING) -- 마지막행
from employees;

RANK(); --- 동율인 경우 같은 순위가 되고 다음순위는 동률 만큼 지난 다음 순위가 된가. 1,1,1,4
--- 직원들 주에 자신 급여가 몇 위가 되는 지 순위를 출력
select employee_id, first_name, salary, RANK() over(order by salary desc ) rank
from employees;
--- 각부서에서 급여가 몇위 일까?
select employee_id, first_name, salary, department_id
    , RANK() over(partition by department_id order by salary desc ) dept_rank
from employees;

--- 전체 직원의 순위와 각부서를 순위를 출력
select employee_id, first_name, salary, RANK() over(order by salary desc ) rank
       , department_id
       , RANK() over(partition by department_id order by salary desc ) dept_rank
from employees;
---- 1,1,3,4,5,5,7

--- 1,1,2,3,3,4
--- 같은 순위는 동률 다음 순위는 1증가 한 값 : DENSE_RANK() 
select employee_id, first_name, salary, department_id
    , RANK() over(order by salary desc ) emp_rank
    , DENSE_RANK() over(order by salary desc ) emp_DENSE
from employees;

--- 1,2,3,4,5,6,7 : 무조건 1씩 증가하는 순위
select employee_id, first_name, salary, department_id
    , RANK() over(order by salary desc ) emp_rank
    , ROW_NUMBER() over(order by salary desc ) emp_NUMBER
from employees;

--- 부서별 급여의 합계를 구하세요;
select department_id , sum(salary)
from employees
group by department_id;

--- 사원번호, 이름 , 직무 그리고 부서와 급여의 합계를 출력하세요.
select employee_id, first_name, job_id, department_id, 
       sum(salary) over (partition by department_id) dep_sum
from employees;
--- 직무와 직무별 급여의 병균 그리고  사원번호, 이름, 급여를 출력
select employee_id, first_name, salary, job_id, 
       avg(salary) over (partition by job_id) job_sum
from employees;

--- 부서와 부서별 최대 급여와 이름, 사번, 급여, 직무를 출력
select employee_id, first_name, salary, job_id, department_id
        , max(salary) over(partition by department_id)
from employees;

select employee_id, first_name, salary, job_id, department_id
       ,first_value(salary)  over(partition by department_id order by salary desc 
                                  ROWS UNBOUNDED PRECEDING)
from employees;

/*
select employee_id, first_name, salary, job_id, department_id
       ,first_value(salary)  over(partition by department_id order by salary desc )
from employees;
*/
--- 부서와 부서별 최소 급여와 이름, 사번, 급여, 직무를 출력
select employee_id, first_name, salary, job_id, department_id
        , min(salary) over(partition by department_id)
from employees;
select employee_id, first_name, salary, job_id, department_id
       ,first_value(salary)  over(partition by department_id order by salary asc 
                                  ROWS UNBOUNDED PRECEDING) -- 첫행
from employees;
select employee_id, first_name, salary, job_id, department_id
       ,last_value(salary)  over(partition by department_id order by salary desc 
                                 ROWS between UNBOUNDED PRECEDING -- 첫행
                                      and UNBOUNDED FOLLOWING) -- 마지막행
from employees;
